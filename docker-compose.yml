version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: sistema-tours-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - POSTGRES_DB=sistema_tours
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "127.0.0.1:5432:5432"  # Solo acceso local
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sistema_tours"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=sistema_tours
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - SERVER_PORT=8080
      - SERVER_HOST=0.0.0.0
      - GIN_MODE=release
      - ENV=production
      - APP_ENV=production
      - JWT_SECRET=angel_proyecto_tours_2025_jwt_secret_muy_largo_y_seguro
      - CORS_ORIGIN=https://admin.angelproyect.com,https://reservas.angelproyect.com
    ports:
      - "127.0.0.1:8080:8080"  # Solo acceso local para nginx
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend-container
    restart: unless-stopped
    networks:
      - frontend-network
    depends_on:
      - backend

  paginawebbtour:
    build:
      context: ./paginawebbtour
      dockerfile: Dockerfile
    container_name: paginawebbtour-container
    restart: unless-stopped
    networks:
      - frontend-network
    depends_on:
      - backend

  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/certs:/etc/nginx/certs:ro
      - ./ssl:/etc/nginx/ssl:ro  # Certificados SSL
    restart: unless-stopped
    networks:
      - frontend-network
      - backend-network
    depends_on:
      - frontend
      - paginawebbtour
      - backend
      
  # Cambio: Usando una imagen que ya tiene Python instalado
  backup:
    image: python:3.10-alpine
    container_name: db-backup
    volumes:
      - ./scripts:/scripts
      - ./backups:/backups
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - POSTGRES_CONTAINER=sistema-tours-db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - POSTGRES_DB=sistema_tours
      - B2_KEY_ID=c331dab6a0c1
      - B2_APP_KEY=0052d6ba43deba114f2a4f83dda099d5f3d4a01f07
      - B2_BUCKET=OceanTours
      - TZ=America/Lima
    command: >
      sh -c "apk add --no-cache bash docker-cli postgresql-client tzdata &&
             echo 'America/Lima' > /etc/timezone &&
             apk --no-cache add tzdata &&
             ln -sf /usr/share/zoneinfo/America/Lima /etc/localtime &&
             pip install b2 &&
             mkdir -p /backups &&
             chmod +x /scripts/backup-postgres-to-b2.sh &&
             echo '0 1 * * * /scripts/backup-postgres-to-b2.sh > /backups/cron.log 2>&1' > /etc/crontabs/root &&
             echo '# Para pruebas: ejecutar cada hora a los minutos 15 y 45' >> /etc/crontabs/root &&
             echo '15,45 * * * * /scripts/backup-postgres-to-b2.sh > /backups/cron_test.log 2>&1' >> /etc/crontabs/root &&
             crond -f -d 8"
    restart: unless-stopped
    networks:
      - backend-network

volumes:
  postgres_data:
    driver: local

networks:
  backend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
  frontend-network:
    driver: bridge

#version: '3.8'

#services:
 # db:
  #  image: postgres:15-alpine
   # container_name: sistema-tours-db
    #environment:
     # - POSTGRES_USER=postgres
      #- POSTGRES_PASSWORD=postgres123
      #- POSTGRES_DB=sistema_tours
      #- POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    #ports:
     # - "127.0.0.1:5432:5432"  # Solo acceso local
    #volumes:
     # - postgres_data:/var/lib/postgresql/data
      #- ./backend/migrations:/docker-entrypoint-initdb.d:ro
    #restart: unless-stopped
    #networks:
     # - backend-network
   # healthcheck:
    #  test: ["CMD-SHELL", "pg_isready -U postgres -d sistema_tours"]
     # interval: 10s
      #timeout: 5s
     # retries: 5
     # start_period: 30s

 # backend:
  #  build:
   #   context: ./backend
   #   dockerfile: Dockerfile
   # container_name: backend
   # environment:
      #- DB_HOST=db
      #- DB_PORT=5432
      #- DB_NAME=sistema_tours
      #- DB_USER=postgres
      #- DB_PASSWORD=postgres123
      #- SERVER_PORT=8080
      #- SERVER_HOST=0.0.0.0
      #- GIN_MODE=release
      #- ENV=production
      #- APP_ENV=production
     # - JWT_SECRET=angel_proyecto_tours_2025_jwt_secret_muy_largo_y_seguro
      #- CORS_ORIGIN=https://admin.angelproyect.com
  #  ports:
   #   - "127.0.0.1:8080:8080"  # Solo acceso local para nginx
  #  depends_on:
   #   db:
   #     condition: service_healthy
   # restart: unless-stopped
   # networks:
    #  - backend-network
   # healthcheck:
    #  test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
     # interval: 30s
     # timeout: 10s
     # retries: 3
     # start_period: 40s

  #frontend:
   # build:
   #   context: ./frontend
    #  dockerfile: Dockerfile
   # container_name: frontend-container
  #  volumes:
   #   - ./frontend/certs:/etc/nginx/certs:ro
   # environment:
   #   - NODE_ENV=production
  #  restart: unless-stopped
   # networks:
   #   - frontend-network
   # depends_on:
   #   - backend

 # nginx:
  #  image: nginx:alpine
   # container_name: nginx-proxy
   # ports:
   #   - "80:80"
   #   - "443:443"
   # volumes:
    #  - ./nginx.conf:/etc/nginx/nginx.conf:ro
   #   - ./frontend/certs:/etc/nginx/certs:ro
   # restart: unless-stopped
   # networks:
    #  - frontend-network
     # - backend-network
    #depends_on:
      #- frontend
      #- backend

#volumes:
 # postgres_data:
  #  driver: local

# networks:
 # backend-network:
   # driver: bridge
  #  ipam:
    #  config:
     #   - subnet: 172.30.0.0/16
 # frontend-network:
  #  driver: bridge